#! /usr/bin/env python3

# Build and launch a Unity project
#
# Produces some reasonably trimmed output, so you can use this as your makeprg.
#
# Iteration builds on an empty project are ~15 seconds, so I recommend
# asyncrun.vim or similar.
#
# Generates some C# code to make building easier. You may want to disable
# generation and edit the generated file.

import os
import pprint
import subprocess

unity_exe = "c:/Program Files/Unity/Hub/Editor/2020.3.12f1/Editor/Unity.exe"
project_root = "c:/code/bug-repro/"
project_name = "bug-repro"
output_exe = f"c:/code/Builds/{project_name}/{project_name}.exe"

# Needs work if you want multiple scenes.
target_scene = "Assets/Scenes/SampleScene.unity"


logfile = os.path.join(project_root, "build.log")
buildscript = os.path.join(project_root, "Assets/Scripts/Editor/Builder.cs")

start_of_interesting_log = "-- Build Starting --"
end_of_interesting_log = "-- Build Complete --"

buildscript_content = f""" // GENERATED by run_build.py
using UnityEngine;
using UnityEditor;

public static class Builder {{
    public static void Build() {{
        Debug.Log("{start_of_interesting_log}");
        var buildPlayerOptions = new BuildPlayerOptions();
        // Make this list as short as possible to make faster builds. You could
        // filter EditorBuildSettings.scenes instead of listing scenes here.
        buildPlayerOptions.scenes = new[] {{
            "{target_scene}",
        }};
        // You could generate a .cs file that contains this path from run_build.py.
        buildPlayerOptions.locationPathName = "{output_exe}";
        buildPlayerOptions.target = BuildTarget.StandaloneWindows;
        buildPlayerOptions.options = BuildOptions.Development | BuildOptions.AutoRunPlayer | BuildOptions.AllowDebugging;
        if (System.IO.File.Exists(buildPlayerOptions.locationPathName)) {{
            // Disable this line if you make asset changes.
            buildPlayerOptions.options |= BuildOptions.BuildScriptsOnly | BuildOptions.PatchPackage;
        }}

        var report = BuildPipeline.BuildPlayer(buildPlayerOptions);
        var summary = report.summary;
        var duration = summary.buildEndedAt - summary.buildStartedAt; // doesn't include Unity startup time.

        Debug.Log($"Build {{summary.result}} after {{duration.Seconds}} seconds\\n"+"{end_of_interesting_log}");
    }}
}}
"""

with open(buildscript, "w") as f:
    f.write(buildscript_content)


args = [
    unity_exe,
    "-projectPath", project_root,
    "-batchmode",
    "-logFile", logfile,
    "-executeMethod", "Builder.Build",
    "-quit",
]
# Could use command arg for building to avoid any C# code, but it requires you
# set the appropriate scenes and configuration (scripts only, etc) in
# File > Build Settings and it doesn't seem to be any faster.
# args = [
#     unity_exe,
#     "-projectPath", project_root,
#     "-batchmode",
#     "-buildWindows64Player", output_exe,
#     "-logFile", logfile,
#     "-quit"
# ]

pprint.pprint(args)

is_error = False
try:
    subprocess.check_call(
        args,
        cwd=project_root,
        universal_newlines=True,
    )
except subprocess.CalledProcessError:
    is_error = True

with open(logfile, "r") as f:
    print()
    print(logfile)
    print()
    can_print = is_error
    for line in f:
        can_print = can_print or start_of_interesting_log in line
        if can_print:
            can_print = end_of_interesting_log not in line
            print(line, end="")
